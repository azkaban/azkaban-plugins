/*
 * Copyright 2012 LinkedIn Corp.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package azkaban.jobtype.hiveutils;

import org.apache.hadoop.hive.metastore.api.FieldSchema;
import org.apache.hadoop.hive.metastore.api.Schema;
import org.apache.hadoop.hive.ql.Driver;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class RealHiveQueryAnalyzer implements HiveQueryAnalyzer {
  private final Driver hiveDriver;

  private static Map<Integer, String> HIVE_ERROR_CODE_MAPPING = new HashMap<Integer, String>();
  private static final String DEFAULT_ERROR_MSG = "unknown error";

  static {
    HIVE_ERROR_CODE_MAPPING.put(10, "semantic error");
    HIVE_ERROR_CODE_MAPPING.put(11, "parsing error");
    HIVE_ERROR_CODE_MAPPING.put(12, "internal error");
  }

  public RealHiveQueryAnalyzer(Driver driver) {
    hiveDriver = driver;
  }

  @Override
  public List<ResultSchema> determineResultSchema(String query) throws HiveQueryException {

    int resultCode = hiveDriver.compile(query);

    if (resultCode != 0) {
      String errorMsg = HIVE_ERROR_CODE_MAPPING.get(resultCode);
      errorMsg = (errorMsg == null) ? DEFAULT_ERROR_MSG : errorMsg;
      throw new HiveQueryException(query, resultCode, errorMsg);
    }

    Schema tableSchema = hiveDriver.getSchema();
    List<FieldSchema> fieldSchemaList = tableSchema.getFieldSchemas();

    List<ResultSchema> result = new ArrayList<ResultSchema>(fieldSchemaList.size());
    if (fieldSchemaList != null) {
      for (FieldSchema fs : fieldSchemaList) {
        result.add(new ResultSchema(fs.getName(), fs.getType(), fs.getComment()));
      }
    }
    return result;
  }
}
